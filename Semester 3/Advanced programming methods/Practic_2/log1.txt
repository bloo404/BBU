----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
((((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}));forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))});forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))})
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
(((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}));forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))})
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
((((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt);(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}))
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
(((Ref(int) v1;Ref(int) v2);Ref(int) v3);int cnt)
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
int cnt
((Ref(int) v1;Ref(int) v2);Ref(int) v3)
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
int cnt
Ref(int) v3
(Ref(int) v1;Ref(int) v2)
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
int cnt
Ref(int) v3
Ref(int) v2
Ref(int) v1
SymTable:
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
int cnt
Ref(int) v3
Ref(int) v2
SymTable:
v1(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
int cnt
Ref(int) v3
SymTable:
v1(0, int)
v2(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
int cnt
SymTable:
v1(0, int)
v2(0, int)
v3(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
(((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}});newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]})
SymTable:
cntint:0
v1(0, int)
v2(0, int)
v3(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}
((NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}});NewStmt{varName='v3', exp=ValueExp{e=int:4}})
SymTable:
cntint:0
v1(0, int)
v2(0, int)
v3(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}
NewStmt{varName='v3', exp=ValueExp{e=int:4}}
(NewStmt{varName='v1', exp=ValueExp{e=int:2}};NewStmt{varName='v2', exp=ValueExp{e=int:3}})
SymTable:
cntint:0
v1(0, int)
v2(0, int)
v3(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}
NewStmt{varName='v3', exp=ValueExp{e=int:4}}
NewStmt{varName='v2', exp=ValueExp{e=int:3}}
NewStmt{varName='v1', exp=ValueExp{e=int:2}}
SymTable:
cntint:0
v1(0, int)
v2(0, int)
v3(0, int)
Out:
FileTable:
Heap:

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}
NewStmt{varName='v3', exp=ValueExp{e=int:4}}
NewStmt{varName='v2', exp=ValueExp{e=int:3}}
SymTable:
cntint:0
v1(1, int)
v2(0, int)
v3(0, int)
Out:
FileTable:
Heap:
1 -> int:2

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}
NewStmt{varName='v3', exp=ValueExp{e=int:4}}
SymTable:
cntint:0
v1(1, int)
v2(2, int)
v3(0, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
newBarrier{var='cnt', exp=ReadHeapExp{exp=v2}, rl=java.util.concurrent.locks.ReentrantLock@697ffafd[Unlocked]}
SymTable:
cntint:0
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=0}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
forkStmt{stmt=((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
forkStmt{stmt=(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v1}))
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]};print(ReadHeapExp{exp=v3}))
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
print(ReadHeapExp{exp=v1})
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]};WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3}))
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
(((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));print(ReadHeapExp{exp=v2}))
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
print(ReadHeapExp{exp=v3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@24b36d94[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
print(ReadHeapExp{exp=v1})
WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@6c698a19[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
((awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}));WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}))
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
print(ReadHeapExp{exp=v3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@49388be0[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
print(ReadHeapExp{exp=v1})
WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@ed78dda[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
(awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]};WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3}))
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
print(ReadHeapExp{exp=v3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@63cfdcdb[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
print(ReadHeapExp{exp=v1})
WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@c58d861[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@60e2f9dc[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
print(ReadHeapExp{exp=v3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@3e633acc[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
print(ReadHeapExp{exp=v1})
WriteHeap(v1, ArithExp{e1=ReadHeapExp{exp=v1}, e2=ValueExp{e=int:10}, op=3})
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
awaitStmt{var='cnt', rl=java.util.concurrent.locks.ReentrantLock@31541463[Unlocked]}
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:2
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
print(ReadHeapExp{exp=v3})
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:20
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
print(ReadHeapExp{exp=v1})
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:20
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
FileTable:
Heap:
1 -> int:20
2 -> int:3
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 1
ExeStack:
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
int:4
int:20
FileTable:
Heap:
1 -> int:20
2 -> int:30
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 2
ExeStack:
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
int:4
int:20
FileTable:
Heap:
1 -> int:20
2 -> int:30
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
WriteHeap(v2, ArithExp{e1=ReadHeapExp{exp=v2}, e2=ValueExp{e=int:10}, op=3})
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
int:4
int:20
FileTable:
Heap:
1 -> int:20
2 -> int:30
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
print(ReadHeapExp{exp=v2})
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
int:4
int:20
FileTable:
Heap:
1 -> int:20
2 -> int:300
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}
----------------
Id: 3
ExeStack:
SymTable:
cntint:1
v1(1, int)
v2(2, int)
v3(3, int)
Out:
int:4
int:20
int:300
FileTable:
Heap:
1 -> int:20
2 -> int:300
3 -> int:4

Cyclic Barrier:
MyCycBar{cyclicBarrier={1=3=[1, 2, 3]}, rl=java.util.concurrent.locks.ReentrantLock@39540838[Unlocked], freeSpot=1}

     1                                  ; (a*2)+2*(b-3)-d-2*c
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 1E                          a db 30
    16 00000001 1A                          b db 26 
    17 00000002 28                          c db 40 
    18 00000003 0401                        d dw 260
    19                                      
    20                                      ; result: -234
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                      
    26                                      ; (a*2)+2*(b-3)-d-2*c
    27                                      
    28                                          ; a*2
    29 00000000 A0[00000000]                    mov al, [a] ; al = a
    30 00000005 B302                            mov bl, 2 ; bl=2
    31 00000007 F6E3                            mul bl ; ax = a*2
    32                                          
    33                                          ; b-3
    34 00000009 8A1D[01000000]                  mov bl, [b] ; bl = b
    35 0000000F 80EB03                          sub bl, 3h ; bl = b-3
    36                                          
    37                                          ; 2*(b-3)
    38 00000012 6689C1                          mov cx, ax ; we move a*2 into cx
    39 00000015 66B80000                        mov ax, 0 ; clean the register
    40 00000019 B002                            mov al, 2 ; put the value of 2 into ax
    41 0000001B F6E3                            mul bl ; ax = 2*(b-3)
    42                                          
    43                                          ; the sum of the two 
    44                                          ; (a*2)+2*(b-3)
    45 0000001D 6601C1                          add cx, ax ; cx=(a*2)+2*(b-3)
    46                                          
    47                                          ; 2*c
    48 00000020 66B80000                        mov ax, 0 ; clean the register and put 2 into it
    49 00000024 B002                            mov al, 2 ; al=2
    50 00000026 8A1D[02000000]                  mov bl, [c] ; cl=c
    51 0000002C F6E3                            mul bl ; now ax=c*2
    52                                          
    53                                          ; (a*2)+2*(b-3)-d
    54 0000002E 668B15[03000000]                mov dx, [d] ; dx=d
    55 00000035 6629D1                          sub cx,dx ; cx=(a*2)+2*(b-3)-d
    56                                          
    57                                          ; (a*2)+2*(b-3)-d-2*c
    58 00000038 6629C1                          sub cx, ax ; cx=(a*2)+2*(b-3)-d-2*c
    59                                          
    60                                          ; exit(0)
    61 0000003B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    62 0000003D FF15[00000000]                  call    [exit]       ; call exit to terminate the program

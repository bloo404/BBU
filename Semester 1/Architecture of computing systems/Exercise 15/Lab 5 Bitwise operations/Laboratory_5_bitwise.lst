     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 B7F6                        A dw 1111_0110_1011_0111b ; 111_0      11-14 A
    14 00000002 C03D                        B dw 0011_1101_1100_0000b ; 100_000    1-6 B
    15 00000004 <res 00000004>              C resd 1
    16                                      
    17                                  ;   AND 1 1 0    OR 1 1 1 1  XOR 1 0 1 1        NOT 1 1 0
    18                                  ;   ---------     ----------    -----------    ----------
    19                                  ;     1 1 1 0       1 1 1 1      1 1 0 1            0 0 1
    20                                  ;     0 1 0 0       0 1 1 0      0 1 1 0
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; Given the words A and B, compute the doubleword C as follows:
    26                                          ; the bits 0-2 of C have the value 0
    27                                          ; the bits 3-5 of C have the value 1
    28                                          ; the bits 6-9 of C are the same as the bits 11-14 of A
    29                                          ; the bits 10-15 of C are the same as the bits 1-6 of B
    30                                          ; the bits 16-31 of C have the value 1
    31                                          
    32 00000000 B9FFFFFFFF                      mov ecx, 1111_1111_1111_1111_1111_1111_1111_1111b 
    33                                                      ; ECX will remember our C of 32 bits       
    34                                                      ; ECX is now 1111 1111 1111 1111 1111 1111 1111 1111 b
    35                                                      ; ECX = -1
    36                                                      
    37 00000005 80E1F8                          and cl, 1111_1000b 
    38                                                      ; ECX = 1111 1111 1111 1111 1111 1111 1111 1000 b
    39                                                      ; we did this in order to solve the first 6 bits
    40                                                      ; the bits 0-2 of C have the value 0
    41                                                      ; the bits 3-5 of C have the value 1
    42                                                      ; ECX = -8
    43 00000008 C1C906                          ror ecx, 6 
    44                                                  ; ECX = 1110 0011 1111 1111 1111 1111 1111 1111 b
    45                                                  ; we did this so we can keep them in the left while we play with A & B (working on CX/CL)
    46                                                  ; ECX = E3FF FFFF - signed!!!
    47                                                  
    48                                          ; working with A
    49 0000000B 66A1[00000000]                  mov AX, [A] ; AX = A now (F6B7)
    50 00000011 66C1C80B                        ror AX, 11 ; now the last 4 bits of AX are actually what we need into ECX (D6FE)
    51 00000015 6683C8F0                        or AX, 1111_1111_1111_0000b ; to keep only the last 4 pure and to not intervene in the 'and' operation (FFFE)
    52 00000019 6621C1                          and cx, ax ; now the 4 bits we needed from ax are in cx (E3FF FFFE)
    53                                          
    54 0000001C C1C904                          ror ECX, 4 ; rotate again so we can keep the bits from A (FFFF FFFF EE3F FFFF)
    55                                          
    56                                          ; working with B
    57 0000001F 66A1[02000000]                  mov ax, [B] ; AX = B now (3DC0)
    58 00000025 66D1C8                          ror ax, 1 ; we rotate what was in AX so we can keep only 1-6 bits from B (without the position 0 one) (1EE0)
    59 00000028 6683C8C0                        or AX, 1111_1111_1100_0000b ; isolating the last 6 bits and making the rest 1s to not influence ECX (FFE0)
    60 0000002C 6621C1                          and cx, ax ; last 6 bits are now in the right position (EE3F FFE0)
    61                                          
    62                                          ; rotating back
    63 0000002F C1C10A                          rol ECX, 10 ; roll back the 10 bits we rotated initially / we also could ror and it s the same thing, but we d rotate more
    64                                                  ; specifically if we ror we would have to ror ecx, 22 until we get back to the initial position 
    65                                                  ; (32-10 we have to rotate now)
    66 00000032 890D[04000000]                  mov [C], ECX ; add the solution to the C address (FFFF FFFF FFFF 83B8)
    67                                          ; exit(0)
    68 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program

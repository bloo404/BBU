     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit 
     8                                  extern fclose
     9                                  extern strlen
    10                                  extern fprintf      
    11                                  extern fopen        ; tell nasm that exit exists even if we won't be defining it
    12                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    13                                  import scanf msvcrt.dll
    14                                  import fopen msvcrt.dll
    15                                  import fclose msvcrt.dll
    16                                  import strlen msvcrt.dll
    17                                  import fprintf msvcrt.dll
    18                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    19                                  
    20                                  ; our data is declared here (the variables needed by our program)
    21                                  segment data use32 class=data
    22 00000000 612A61206125265E25-         text db "a*a a%&^%&^$& 23t47896q4sdjfasi", 0
    22 00000009 265E24262032337434-
    22 00000012 37383936713473646A-
    22 0000001B 6661736900         
    23                                      len equ $-text
    24 00000020 6669736965722E7478-         file_name db "fisier.txt", 0
    24 00000029 7400               
    25 0000002B 7700                        access_mode db "w", 0
    26 0000002D 257300                      format db "%s", 0
    27 00000030 FFFFFFFF                    file_descriptor dd -1
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                          ; A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Replace all the special characters from the given text
    33                                          
    34                                          ; creating and opening the file
    35 00000000 68[2B000000]                    push dword access_mode     
    36 00000005 68[20000000]                    push dword file_name
    37 0000000A FF15[00000000]                  call [fopen]
    38 00000010 83C408                          add esp, 4*2
    39                                  
    40                                          ; store the file descriptor
    41 00000013 A3[30000000]                    mov [file_descriptor], eax
    42 00000018 83F800                          cmp eax, 0
    43 0000001B 745C                            je the_end
    44                                          
    45                                          ; changing the charachters that are special charachter into X
    46 0000001D BE00000000                      mov esi, 0 ; text initial address
    47 00000022 B920000000                      mov ecx, len ; length of text
    48 00000027 83E902                          sub ecx, 2 ; substracting the ending point of the file (our 0)
    49 0000002A FC                              cld ; clear direction flag
    50                                          
    51 0000002B E34C                            jecxz the_end
    52                                          again:
    53 0000002D 8A86[00000000]                      mov al, [text + esi] ; AL = current byte
    54 00000033 3C30                                cmp al, '0'
    55 00000035 7214                                jb caracter_special ; if al <0
    56 00000037 3C39                                cmp al, '9'
    57 00000039 7618                                jbe nu_caracter_special ; if al >=0 and <=9
    58 0000003B 3C41                                cmp al,'A'
    59 0000003D 720C                                jb caracter_special ; if al >9 and al<A
    60 0000003F 3C5A                                cmp al,'Z'
    61 00000041 7610                                jbe nu_caracter_special ; if al>=A & al<=Z
    62 00000043 3C61                                cmp al,'a'
    63 00000045 7204                                jb caracter_special ; if al>Z & al<a
    64 00000047 3C7A                                cmp al,'z'
    65 00000049 7608                                jbe nu_caracter_special ; if al>=a & al<=z
    66                                              ; otherwise it s a special charachter
    67                                              caracter_special:
    68 0000004B B058                                    mov al, 'X'
    69 0000004D 8886[00000000]                          mov [text + esi],al
    70                                              nu_caracter_special:
    71 00000053 46                                      inc esi
    72 00000054 E2D7                            loop again
    73                                          
    74                                          ; put text into the file
    75 00000056 68[00000000]                    push dword text
    76 0000005B FF35[30000000]                  push dword [file_descriptor]
    77 00000061 FF15[00000000]                  call [fprintf]
    78 00000067 83C408                          add esp, 4*2
    79                                          
    80                                          ; closing the file
    81 0000006A FF35[30000000]                  push dword [file_descriptor]
    82 00000070 FF15[00000000]                  call [fclose]
    83 00000076 83C404                          add esp, 4
    84                                          
    85                                          the_end:
    86                                          ; exit(0)
    87 00000079 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    88 0000007B FF15[00000000]                  call    [exit]       ; call exit to terminate the program

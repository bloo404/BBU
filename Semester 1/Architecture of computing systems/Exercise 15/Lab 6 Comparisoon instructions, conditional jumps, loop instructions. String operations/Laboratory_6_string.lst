     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 32313333343236              A db '2','1','3','3','4','2','6'
    14                                      lenA equ $-A
    15 00000007 343537363231                B db '4','5','7','6','2','1'
    16                                      lenB equ $-B
    17 0000000D <res 00000002>              R resw 1
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; Two byte strings A and B are given. 
    23                                          ; Obtain the string R by concatenating the elements of B in reverse order and the odd elements of A.
    24                                          ; Example:
    25                                          ; A: 2, 1, 3, 3, 4, 2, 6
    26                                          ; B: 4, 5, 7, 6, 2, 1
    27                                          ; R: 1, 2, 6, 7, 5, 4, 1, 3, 3
    28                                          
    29 00000000 B906000000                      mov ecx, lenB ; we put the len of B into ecx
    30 00000005 BE00000000                      mov esi, 0 ; we use esi as an index when putting into R
    31 0000000A BF05000000                      mov edi, lenB - 1 ; we use edi to go through B's elements
    32                                          
    33 0000000F E321                            jecxz computeA ; if ecx is 0 it means we will jump to solving the part of A (lenB = 0)
    34                                          
    35                                          computeB:
    36 00000011 8A87[07000000]                      mov al, [B + edi]           ; AL takes B + offset where the element is located (from last to first)
    37 00000017 8886[0D000000]                      mov [R + esi], al           ; R takes the result from AL (we couldn't move from an address to another, we needed a register)
    38 0000001D 46                                  inc esi                     ; increase esi (index of R)
    39 0000001E 4F                                  dec edi                     ; decrease edi (index of B)
    40 0000001F E2F0                            loop computeB                   ; loop, ecx <- ecx-1 
    41                                          
    42 00000021 BE00000000                      mov esi, 0 ; index of A
    43 00000026 BF06000000                      mov edi, lenB ; index of R (how many charachters it had from B)
    44 0000002B B907000000                      mov ecx, lenA ; len of A (how many charachters we go through)
    45                                          
    46 00000030 E318                            jecxz final ; if ecx is 0 it means we will jump to the end (lenA = 0)
    47                                          
    48                                          computeA:
    49 00000032 8A86[00000000]                      mov al, [A + esi]           ; al <- A + offset where the element is located (from first to last)
    50 00000038 2C30                                sub al, '0'                 ; substracting the ascii code of '0' => the actual number ('0' = 30)
    51 0000003A A801                                test al, 01h                ; operate an `and` on the first bit to change the parity flag, the `and` doesn't affect the operand
    52 0000003C 7A09                                jp not_odd                  ; if parity flag = 1 => it is not odd (parity on, e PAR, PARity = true, PARity flag)
    53 0000003E 7B00                                jnp if_odd ; for my mental sanity to see the jump, if parity flag = 0 (PARity = false)
    54                                              if_odd: ; only if odd
    55 00000040 8887[0D000000]                          mov [R + edi], al       ; put the value into R + index
    56 00000046 47                                      inc edi                 ; increase the index of R
    57                                              not_odd:
    58 00000047 46                                      inc esi  ; both cases do inc esi
    59 00000048 E2E8                            loop computeA                   ; loop, ecx <- ecx-1
    60                                          
    61                                          final: ; end of program
    62                                      
    63                                          ; exit(0)
    64 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program

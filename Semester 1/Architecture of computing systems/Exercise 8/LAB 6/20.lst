     1                                  ; Being given a string of bytes representing a text (succession of words separated by spaces), determine which words are palindromes (meaning may be interpreted the same way in either forward or reverse direction); 
     2                                  
     3                                  bits 32 ; assembling for the 32 bits architecture
     4                                  
     5                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     6                                  global start        
     7                                  
     8                                  ; declare external functions needed by our program
     9                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    12                                  
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 636F6A6F6320627269-         a db "cojoc brinza sos capac fosila ",0
    15 00000009 6E7A6120736F732063-
    15 00000012 6170616320666F7369-
    15 0000001B 6C612000           
    16                                      l equ $-a
    17 0000001F 20                          b db " "
    18                                      b1 equ $-b
    19 00000020 00<rept>                    r times l db 0
    20 0000003F 00<rept>                    d times l db 0
    21 0000005E 00<rept>                    e times l db 0
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 B91F000000                     mov ecx,l ; ecx <- length of a
    25 00000005 BE[00000000]                   mov esi,a ; esi <- adress of a 
    26 0000000A BF[20000000]                   mov edi,r ; edi <- adress of r, r is where we separate words
    27 0000000F BD[5E000000]                   mov ebp,e ; ebp <- adress of e, where we will have the resulted words
    28 00000014 FC                             cld ; clear direction flag
    29 00000015 E37C                           jecxz final ; if the length is 0 => a doesn t have words => we skip the loops
    30 00000017 BB00000000                     mov ebx,0 ; ebx <- 0 (we want to have the length of every word 0 in the beginning)
    31                                      Repeta:
    32                                      ; gets the characters of the word
    33 0000001C AC                               lodsb ; in AL we put the octet of the <DS:ESI> address
    34 0000001D 3A05[1F000000]                   cmp al,[b] ; if the rest is 0, we repeat the loop otherwise we go to space
    35 00000023 7E04                             jng space ; jumps to space if the value is not greater than space
    36 00000025 AA                               stosb ; we store the octet of AL into <ES:EDI>
    37 00000026 43                               inc ebx ; we increase ebx
    38 00000027 E2F3                        loop Repeta
    39                                  
    40                                      space :
    41                                      ; moves the word so we can verify only that specific word
    42 00000029 89F4                            mov esp,esi ; we put the address we re at in a(esi), in esp
    43 0000002B 89CA                            mov edx,ecx ; in edx we put the actual ecx to use it later
    44 0000002D 89D9                            mov ecx,ebx ; we put the length of the word in ecx
    45 0000002F BE[20000000]                    mov esi,r ; we put the length of r in esi
    46 00000034 01DE                            add esi,ebx 
    47 00000036 4E                              dec esi ; decrease esi by one to create de inverse word
    48 00000037 BF[3F000000]                    mov edi,d ; we put the address of d into edi
    49 0000003C FD                              std ; set direction flag to 1 df=1
    50 0000003D E306                            jecxz verificare ; if ecx=0 we jump to the verify function
    51                                          Repeta2:
    52 0000003F FD                                 std ; set direction flag to 1 df=1
    53 00000040 AC                                 lodsb ; in AL we put the octet of the <DS:ESI> address
    54 00000041 FC                                 cld ; clear direction flag
    55 00000042 AA                                 stosb ; we write the inverse of the string into d
    56 00000043 E2FA                            loop Repeta2 
    57                                  
    58                                        verificare:
    59                                        ; we verify if a word is palindrome
    60 00000045 89D9                            mov ecx,ebx ; we put into ecx the length of the word
    61 00000047 BB00000000                      mov ebx,0 ; ebx <- 0
    62 0000004C BE[20000000]                    mov esi,r ; we put the address of r into esi, in r we have the original word
    63 00000051 FC                              cld
    64 00000052 E30C                            jecxz palindrome
    65                                         Repeta3:
    66 00000054 AC                                  lodsb
    67 00000055 3A83[3F000000]                      cmp al,[d+ebx]; we verify charachter by charachter if the words are equal
    68 0000005B 7526                                jne nuPali ; if we find a wrong letter we jump to nuPali
    69 0000005D 43                                  inc ebx ; we increment ebx
    70 0000005E E2F4                          loop Repeta3
    71                                        
    72                                        palindrome :
    73 00000060 89D9                            mov ecx,ebx ; we put in ecx the length of the word
    74 00000062 BE[20000000]                    mov esi,r ; we put into esi the address of the r string
    75 00000067 89EF                            mov edi,ebp ; we move into edi the address of the new string where we will remember the palindrome words
    76 00000069 FC                              cld ; df=0
    77 0000006A E304                            jecxz pali
    78                                          Repeta4:
    79 0000006C AC                                  lodsb
    80 0000006D AA                                  stosb ; we move the word into e
    81 0000006E E2FC                            loop Repeta4 
    82                                          
    83                                      pali : 
    84                                      ; if the word is palindrome
    85 00000070 89FD                            mov ebp,edi
    86 00000072 45                              inc ebp ; we remember the index of e into ebp (where we last were at)
    87 00000073 89E6                            mov esi,esp ; we remember the index of a into esi (where we last were at)
    88 00000075 BF[20000000]                    mov edi,r ; we put the address of r into edi
    89 0000007A BB00000000                      mov ebx,0 ; ebx <- 0
    90 0000007F 89D1                            mov ecx,edx ; we reinitialise the ecx
    91                                         
    92 00000081 E299                            loop Repeta ; we repeat again so we can go to the next word
    93                                         
    94                                          
    95                                      nuPali:
    96                                      ; if the word is not palindrome
    97 00000083 89E6                            mov esi,esp ; we move into esi where we last were in a
    98 00000085 BF[20000000]                    mov edi,r ; we put the address of r into edi
    99 0000008A BB00000000                      mov ebx,0 ; ebx <- 0
   100 0000008F 89D1                            mov ecx,edx ; we reinitialize the ecx
   101                                         
   102 00000091 E289                            loop Repeta ; we repeat again for the next word
   103                                      
   104                                      final:
   105 00000093 6A00                            push dword 0  
   106 00000095 FF15[00000000]                  call [exit]
